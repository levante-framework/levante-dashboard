/**
 * Mock data provider for development mode
 * This file provides mock data for various Firebase services when running in development mode
 */

// Import test user config if available
let importedTestUserId = '';
let importedTestUserEmail = '7vpqcm4ihi@levante.com'; // Default value

// First try to import from the testUserConfig.js file
try {
  // Try to import the test user config that is generated by setup-test-user-preserve.js
  const testUserConfig = require('./testUserConfig');
  if (testUserConfig && testUserConfig.TEST_USER_ID) {
    importedTestUserId = testUserConfig.TEST_USER_ID;
    console.log('Loaded test user ID from configuration:', importedTestUserId);
    
    if (testUserConfig.TEST_USER_EMAIL) {
      importedTestUserEmail = testUserConfig.TEST_USER_EMAIL;
    }
  }
} catch (e) {
  console.log('No test user config file found. Will try to load from .test-user-uid file.');
  
  // If that fails, try to read from .test-user-uid file directly
  try {
    const fs = require('fs');
    const path = require('path');
    const uidFilePath = path.join('/home/david/levante/firebase-functions', '.test-user-uid');
    
    if (fs.existsSync(uidFilePath)) {
      importedTestUserId = fs.readFileSync(uidFilePath, 'utf8').trim();
      console.log('Loaded test user ID from .test-user-uid file:', importedTestUserId);
    } else {
      console.log('No .test-user-uid file found. Using default empty value.');
    }
  } catch (fsError) {
    console.log('Error reading .test-user-uid file:', fsError);
    console.log('Using default empty value.');
  }
}

// Test user email that will be used for login
export const TEST_USER_EMAIL: string = importedTestUserEmail;

// Test user ID that will be updated at runtime
// It will be filled with the actual UID from the emulator after user creation
export let TEST_USER_ID: string = importedTestUserId;

// Define interfaces for our mock data
export interface MockUserClaims {
  claims: {
    super_admin: boolean;
    admin: boolean;
    created: string;
    email: string;
    roarUid: string;
    adminUid: string;
    assessmentUid: string;
    minimalAdminOrgs: {
      [key: string]: string[];
    };
  };
}

export interface MockFirebaseUser {
  uid: string;
  email: string;
  emailVerified: boolean;
  displayName: string | null;
  isAnonymous: boolean;
  providerData: Array<{
    providerId: string;
    uid: string;
    displayName: string | null;
    email: string;
    phoneNumber: string | null;
    photoURL: string | null;
  }>;
  metadata: {
    creationTime: string;
    lastSignInTime: string;
  };
}

/**
 * Set the test user ID at runtime
 * This function updates the TEST_USER_ID at runtime
 * @param {string} uid - The user ID to set
 * @returns {string} The set user ID
 */
export const setTestUserId = (uid: string): string => {
  console.log('Setting test user ID to:', uid);
  TEST_USER_ID = uid;
  
  // Output for easy console access
  console.log('============================================');
  console.log('TEST USER CONFIGURED: Copy this to use in console if needed');
  console.log(`TEST_USER_ID = '${uid}';`);
  console.log(`window.setEmulatorTestUserId('${uid}');`);
  console.log('============================================');
  
  return uid;
};

/**
 * Get mock user claims for the test user
 * @returns {MockUserClaims} User claims object
 */
export const getMockUserClaims = (): MockUserClaims => {
  console.log('Providing mock user claims for test user');
  return {
    claims: {
      super_admin: true,
      admin: true,
      created: new Date().toISOString(),
      email: TEST_USER_EMAIL,
      roarUid: TEST_USER_ID,
      adminUid: TEST_USER_ID,
      assessmentUid: TEST_USER_ID,
      minimalAdminOrgs: {
        "test-district-1": ["admin"],
        "test-school-1": ["admin"]
      }
    }
  };
};

/**
 * Get a mock Firebase user object for the test user
 * @returns {MockFirebaseUser} Firebase user object
 */
export const getMockFirebaseUser = (): MockFirebaseUser => {
  // Generate a fallback UID if TEST_USER_ID is empty
  const uid = TEST_USER_ID || `mock-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`;
  
  // Log a warning if we're using a generated UID instead of the configured one
  if (!TEST_USER_ID) {
    console.warn('TEST_USER_ID is empty! Using generated UID:', uid);
    console.warn('For proper emulator integration, run setup-test-user-preserve.js');
    
    // Set the TEST_USER_ID so it's available for other functions
    setTestUserId(uid);
  }
  
  return {
    uid,
    email: TEST_USER_EMAIL,
    emailVerified: true,
    displayName: "Test User",
    isAnonymous: false,
    providerData: [{
      providerId: 'password',
      uid: TEST_USER_EMAIL,
      displayName: "Test User",
      email: TEST_USER_EMAIL,
      phoneNumber: null,
      photoURL: null
    }],
    metadata: {
      creationTime: new Date().toISOString(),
      lastSignInTime: new Date().toISOString()
    }
  };
};

/**
 * Check if the current environment is development mode
 * @returns {boolean} True if in development mode
 */
export const isDevMode = (): boolean => {
  return import.meta.env.DEV === true;
};

/**
 * Check if the provided user ID matches the test user ID
 * @param {string} uid - User ID to check
 * @returns {boolean} True if the user ID matches the test user
 */
export const isTestUser = (uid: string): boolean => {
  return uid === TEST_USER_ID;
};

// Export a default object with all helper functions
export default {
  TEST_USER_ID,
  TEST_USER_EMAIL,
  setTestUserId,
  getMockUserClaims,
  getMockFirebaseUser,
  isDevMode,
  isTestUser
}; 