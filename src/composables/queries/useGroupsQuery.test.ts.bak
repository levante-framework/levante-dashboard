import { ref, nextTick, type Ref } from 'vue';
import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import {
  QueryClient,
  VueQueryPlugin,
  useQuery,
  // Keep UseQueryOptions commented out unless needed and confirmed working
  // type UseQueryOptions,
} from '@tanstack/vue-query';
import { nanoid } from 'nanoid';
import { withSetup } from '@/test-support/withSetup';
import { fetchDocumentsById } from '@/helpers/query/utils';
import useGroupsQuery from './useGroupsQuery';

// --- Mocks ---
const mockFetchDocumentsById = vi.fn().mockResolvedValue([]);
const mockUseQuery = vi.fn();

vi.mock('@/helpers/query/utils', () => ({
  fetchDocumentsById: mockFetchDocumentsById,
}));

vi.mock('@tanstack/vue-query', async (importOriginal) => {
  const original = await importOriginal<typeof import('@tanstack/vue-query')>();
  mockUseQuery.mockImplementation(() => ({ 
    data: ref(null), 
    isLoading: ref(false), 
    isError: ref(false), 
    error: ref(null) 
  })); 
  return {
    useQuery: mockUseQuery,
    QueryClient: original.QueryClient,
    VueQueryPlugin: original.VueQueryPlugin,
  };
});

// --- Types ---
// Placeholder type for the data returned by the query
interface Group {
  id: string;
  name?: string;
  // Add other relevant properties if known
}

// --- Tests ---
describe('useGroupsQuery', () => {
  let queryClient: QueryClient;

  beforeEach(() => {
    queryClient = new QueryClient();
    vi.clearAllMocks();
  });

  afterEach(() => {
    queryClient?.clear();
  });

  it('should call query with correct parameters', () => {
    const mockGroupIds: Ref<string[]> = ref([nanoid(), nanoid()]);

    withSetup(() => useGroupsQuery(mockGroupIds), {
      plugins: [[VueQueryPlugin, { queryClient }]],
    });

    expect(mockUseQuery).toHaveBeenCalledWith({
      queryKey: ['groups', mockGroupIds],
      queryFn: expect.any(Function),
      enabled: expect.objectContaining({ value: true }),
    });

    expect(mockFetchDocumentsById).toHaveBeenCalledWith('groups', mockGroupIds.value);
  });

  it('should allow the query to be disabled via the passed query options', () => {
    const mockGroupIds: Ref<string[]> = ref([nanoid(), nanoid()]);
    // Leaving queryOptions without explicit type for now due to previous issues
    const queryOptions = { enabled: false };

    withSetup(() => useGroupsQuery(mockGroupIds, queryOptions), {
      plugins: [[VueQueryPlugin, { queryClient }]],
    });

    expect(mockUseQuery).toHaveBeenCalledWith({
      queryKey: ['groups', mockGroupIds],
      queryFn: expect.any(Function),
      enabled: expect.objectContaining({ value: false }),
    });

    expect(mockFetchDocumentsById).not.toHaveBeenCalled();
  });

  it('should only fetch data if group IDs are available (non-empty array)', async () => {
    const mockGroupIds: Ref<string[]> = ref([]); // Start empty
    const queryOptions = { enabled: true };

    withSetup(() => useGroupsQuery(mockGroupIds, queryOptions), {
      plugins: [[VueQueryPlugin, { queryClient }]],
    });

    expect(mockUseQuery).toHaveBeenCalledWith({
      queryKey: ['groups', mockGroupIds],
      queryFn: expect.any(Function),
      enabled: expect.objectContaining({ value: false }), // Initially false
    });
    expect(mockFetchDocumentsById).not.toHaveBeenCalled();

    // Add IDs
    mockGroupIds.value = [nanoid()];
    await nextTick();

    // Expect fetch to be called now
    expect(mockFetchDocumentsById).toHaveBeenCalledWith('groups', mockGroupIds.value);
  });

  it('should not let queryOptions override the internally computed value when IDs are missing', async () => {
    const mockGroupIds: Ref<string[]> = ref([]);
    const queryOptions = { enabled: true };

    withSetup(() => useGroupsQuery(mockGroupIds, queryOptions), {
      plugins: [[VueQueryPlugin, { queryClient }]],
    });

    expect(mockUseQuery).toHaveBeenCalledWith({
      queryKey: ['groups', mockGroupIds],
      queryFn: expect.any(Function),
      enabled: expect.objectContaining({ value: false }), // Stays false
    });

    expect(mockFetchDocumentsById).not.toHaveBeenCalled();
  });
}); 