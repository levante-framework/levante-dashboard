name: Preview Deploy
on:
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:
    inputs:
      pr_branch:
        description: 'Checkout this branch from the LEVANTE repository and execute CI/CD tests on it.'
        required: true

concurrency:
  group: ci-preview-tests-${{ github.ref }}-1
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  deployments: write
  pull-requests: write
  statuses: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      # For workflows triggered by pull requests
      - name: Checkout PR code
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4

      # For workflows triggered manually, targeting the LEVANTE dashboard repository specifically
      - name: Checkout manual trigger code
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          repository: levante-framework/levante-dashboard
          ref: ${{ github.event.inputs.pr_branch }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Update PR status
        if: github.event_name == 'pull_request'
        uses: ouzi-dev/commit-status-updater@v2
        with:
          name: 'Tests'
          status: ${{ job.status }}

  build-and-preview:
    name: Deploy Preview
    needs: test
    runs-on: ubuntu-latest

    steps:
      # For workflows triggered by pull requests
      - name: Checkout PR code
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4

      # For workflows triggered manually, targeting the LEVANTE dashboard repository specifically
      - name: Checkout manual trigger code
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          repository: levante-framework/levante-dashboard
          ref: ${{ github.event.inputs.pr_branch }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install dependencies
        run: npm ci
      
      - name: Build (ROAR)
        if: ${{ contains(github.repository, 'roar') }}
        run: npm run build

      - name: Build (LEVANTE)
        if: ${{ contains(github.repository, 'levante') }}
        run: npm run build:dev

      - name: Deploy to Firebase Hosting Channel
        id: firebase-deploy
        run: |
          FIREBASE_PROJECT="${{ secrets.FIREBASE_PROJECT }}"
          TARGET="${{ contains(github.repository, 'levante') && 'dev' || 'staging' }}"
          
          echo "Deploying to project: $FIREBASE_PROJECT, target: $TARGET"
          
          if [[ -z "$FIREBASE_PROJECT" ]]; then
            echo "Error: FIREBASE_PROJECT secret is not set"
            exit 1
          fi
          
          # Get a preview channel
          PREVIEW_CHANNEL="pr-${{ github.event.number || github.run_id }}"
          echo "Using preview channel: $PREVIEW_CHANNEL"
          
          # Run the deployment
          DEPLOY_OUTPUT=$(firebase deploy --only hosting:$TARGET --project $FIREBASE_PROJECT --token "${{ secrets.FIREBASE_SERVICE_ACCOUNT_DEV_ADMIN }}" --json 2>&1)
          
          # Check if deployment was successful
          if [ $? -ne 0 ]; then
            echo "Firebase deployment failed:"
            echo "$DEPLOY_OUTPUT"
            exit 1
          fi
          
          # Extract URL from the output
          DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'https://[^"]*' | head -1)
          
          if [[ -z "$DEPLOY_URL" ]]; then
            echo "Warning: Could not extract deployment URL from output"
            echo "Raw output: $DEPLOY_OUTPUT"
            # Set a fallback URL for testing
            DEPLOY_URL="https://$FIREBASE_PROJECT--$TARGET.web.app"
          fi
          
          echo "Deploy URL: $DEPLOY_URL"
          echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT

      - name: Comment on PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployUrl = `${{ steps.firebase-deploy.outputs.deploy_url }}`;
            const comment = `ðŸš€ Preview deployed to: [${deployUrl}](${deployUrl})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

    outputs:
      deployUrl: ${{ steps.firebase-deploy.outputs.deploy_url }}
