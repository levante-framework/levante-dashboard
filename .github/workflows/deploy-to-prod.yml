name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  version_build_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.LEVANTE_BOT_APP_ID }}
          private_key: ${{ secrets.LEVANTE_BOT_APP_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Read and process version
        id: version
        run: |
          # Read current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          # Remove -dev suffix if it exists
          PROD_VERSION=${CURRENT_VERSION%-dev}
          # Create new branch name
          BRANCH_NAME="v${PROD_VERSION}"
          # Store values for later use
          echo "prod_version=${PROD_VERSION}" >> $GITHUB_OUTPUT
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

      - name: Create and switch to release branch
        run: |
          git checkout -b ${{ steps.version.outputs.branch_name }}
          # Update package.json with production version
          npm version ${{ steps.version.outputs.prod_version }} --no-git-tag-version
          git add package.json
          git commit -m "chore(release): prepare version ${{ steps.version.outputs.prod_version }}"
          git push origin ${{ steps.version.outputs.branch_name }}

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.version.outputs.prod_version }}" -m "Release v${{ steps.version.outputs.prod_version }}"
          git push origin "v${{ steps.version.outputs.prod_version }}"

      - name: Build for production
        env:
          NODE_OPTIONS: '--max_old_space_size=8192'
        run: npm run build:prod

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          sourcemaps: ./dist/assets
          version: v${{ steps.version.outputs.prod_version }}
          finalize: false

      - name: Deploy to Firebase Production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ steps.generate_token.outputs.token }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DEV_ADMIN }}
          channelId: live
          projectId: hs-levante-admin-prod
          target: production

      - name: Finalize Sentry Release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          version: v${{ steps.version.outputs.prod_version }}
          finalize: true

      - name: Update main branch version
        run: |
          git checkout main
          # Increment version based on user selection
          npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          # Add -dev suffix
          NEW_VERSION=$(node -p "require('./package.json').version")
          NEW_VERSION="${NEW_VERSION}-dev"
          # Update package.json with new version
          npm version $NEW_VERSION --no-git-tag-version
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION"
          git push origin main
